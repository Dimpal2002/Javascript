Module-3 ReactJs
----------------

(1)What is React js
-------------------

Answer:
------
->React, sometimes referred to as a frontend JavaScript framework, is a JavaScript library created by Facebook.
->React is a User Interface (UI) library
->React is a JavaScript-based UI development library.
->React is a tool for building UI components
->React creates a VIRTUAL DOM in memory.
->React is a framework that employs Webpack to automatically compile React, JSX, and ES6 code while handling CSS file prefixes.
->Jordan Walke, a software engineer at Facebook, founded the library in 2011, giving it life.

(2)What is NPM in React Js?
---------------------------

Answer:
------
->NPM (Node Package Manager) is the default package manager for Node and is written entirely in JavaScript. Developed by Isaac Z. Schlueter, it was initially released in January 12, 2010. 
->NPM manages all the packages and modules for Node and consists of command line client npm.
->The command npm is used to download JavaScript packages from Node Package Manager.
->This command will download the NPM package create-react-app to a subdirectory of the current working directory named node_modules : npm install create-react-app.
->NPM can install all the dependencies of a project through the package.json file.
->It can also update and uninstall packages.
->NPM gets installed into the system with installation of Node. The required packages and modules in Node project are installed using NPM. A package contains all the files needed for a module and modules are the JavaScript libraries that can be included in Node project according to the requirement of the project.

(3)What is Role of Node Js in react Js?
---------------------------------------

Answer:
------
->Using Node. js and React together empowers web applications to handle heavy server loads and requests. Therefore, it allows you to work easily throughout the development process.

1. Scalability
By fusing Node with React, developers can produce dynamic, substantial, data-driven responsive online applications on various devices. Scalability would be useful when working on enormous projects while maintaining your website’s pace.

2. MERN Stack 
The MERN stack comprises Node.js, Express, MongoDB, and React. And there is no better combo to add a unique dimension to a website than these frameworks. The MERN Stack is compatible with both React.js and Node.js. As a result, you may create web apps by combining Node with React.

3. JSON APIs
The potential to create JavaScript Object Notation (JSON) APIs for the web is strong because of React.js’ high level of code reuse and quick code exchange. Additionally, Node.js makes this possible.

4. Data in Real Time
To build a data streaming app or manage real-time data in your business app, utilize Node.js because these scenarios require a persistent server connection.

5. Prompt Growth
When creating web apps with React and Node, you may see a strong return on your investment and save both time and money. Above all, these technologies offer a perfect framework for building websites that are instantly useful and easy to manage.

6. A high server load
When programmers create online applications, the Node.js and React combination can balance the heavy server demand.

7. Single Page Applications (SPAs)
Does your company require an asynchronous single-page app for data loading? Then, as it enables creating a simple backend model using callback functions, you must choose React with Node Js backend.


(4)What is CLI command In React Js?
-----------------------------------

Answer:
-------
->React has its own command-line interface (CLI) commands. However, these CLI commands are currently only used to create a passable version of a react application using the command line.This will contain a default template as its design, so all the react application created this way will have great consistency as they all have same structure.
->Basic CLI Commands in React:
	Let us learn the basic commands available in Create React App command line application in this chapter.

      ->Creating a new application
	Create React App provides multiple ways to create React application.

      ->Using npx script.
	npx create-react-app <react-app-name>
	npx create-react-app hello-react-app

	Using npm package manager.
	npm init react-app <react-app-name>
	npm init react-app hello-react-app

      ->Using yarn package manager.
	yarn init react-app <react-app-name>
	yarn init react-app hello-react-app

      ->Selecting a template
	Create React App creates React application using default template. Template refers the initial code with certain build-in functionality. There are hundreds of template with many advanced features are available in npm package server. Create React App allows the users to select the template through -template command line switch.

	create-react-app my-app --template typescript
	Above command will create react app using cra-template-typescript package from npm server.

      ->Installing a dependency
	React dependency package can be installed using normal npm or yarn package command as React uses the project structure recommended by npm and yarn.

	Using npm package manager.
	npm install --save react-router-dom

	Using yarn package manager.
	yarn add react-router-dom

	Running the application
	React application can be started using npm or yarn command depending on the package manager used in the project.

	Using npm package manager.
	npm start

	Using yarn package manager.
	yarn start

	To run the application in secure mode (HTTPS), set an environment variable, HTTPS and set it to true before starting the application. For example, in windows command prompt (cmd.exe), the below command set HTTPS and starts the application is HTTPS mode.
	set HTTPS=true && npm start


(5)What is Components in React Js?
----------------------------------

->Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
->Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.
->When creating a React component, the component's name MUST start with an upper case letter.

->Class Component:-
-----------------
->A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.
->The component also requires a render() method, this method returns HTML.

Example:-
Create a Class component called Car

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}

->Function Component:-
---------------------
->Here is the same example as above, but created using a Function component instead.
->A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.

Example:-
Create a Function component called Car

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

->Rendering a Component:-
------------------------
->To use this component in application, use similar syntax as normal HTML: <Car />

import React from 'react';
import ReactDOM from 'react-dom/client';

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

*Props:-
-------
Components can be passed as props, which stands for properties.

Props are like function arguments, and you send them into the component as attributes.

Example:-
Use an attribute to pass a color to the Car component, and use it in the render() function:

import React from 'react';
import ReactDOM from 'react-dom/client';

function Car(props) {
  return <h2>I am a {props.color} Car!</h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);

->Components in Components:-
---------------------------

Example
Use the Car component inside the Garage component:

import React from 'react';
import ReactDOM from 'react-dom/client';

function Car() {
  return <h2>I am a Car!</h2>;
}

function Garage() {
  return (
    <>
	    <h1>Who lives in my Garage?</h1>
	    <Car />
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);

->Components in Files:-
----------------------
React is all about re-using code, and it is recommended to split your components into separate files.

To do that, create a new file with a .js file extension and put the code inside it:

Example:-
This is the new file, we named it "Car.js":

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

export default Car;

->To be able to use the Car component, you have to import the file in your application.

Example
Now we import the "Car.js" file in the application, and we can use the Car component as if it was created here.

import React from 'react';
import ReactDOM from 'react-dom/client';
import Car from './Car.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


(6)What is Header and Content Components in React Js?
-----------------------------------------------------
Header Component:-
-----------------
->The header component typically contains elements that appear at the top of a page, such as a logo, navigation menu, user profile information, or any other elements that should be consistently displayed across multiple pages of the application.
->It may also include functionality such as search bars, breadcrumbs, or buttons for user actions.
->The header component is often placed outside of the main content area and remains fixed or sticky as the user scrolls down the page, providing easy access to important navigation options.

Content Component:-
------------------
->The content component contains the main body of the page, including the primary content that users interact with or view.
->This component may vary significantly depending on the specific functionality of the page. For example, it could display a list of items, a form for user input, a detailed article, or any other type of content relevant to the application.
->Unlike the header component, the content component typically changes dynamically based on user interactions or application state.


(7)How to install React Js on Windows, linux Operating System? How to install NPM and How to check version of NPM?
------------------------------------------------------------------------------------------------------------------
Installation Reactjs on Windows:-
---------------------------------
Step 1: Install Node.js installer for windows. install the LTS version. Once downloaded open NodeJS without disturbing other settings, click on the Next button until it’s completely installed.

Step 2: Open command prompt  to check whether it is completely installed or not type the command –>
 node -v

Step 3: Now in the terminal run the below command: 
npm install -g create-react-app

Step 4:Now Create a new folder where you want to make your react app using the below command: 
mkdir newfolder

->Move inside the same folder using the below command:
cd newfolder (your folder name)

Step 5: Now inside this folder run the command –>
create-react-app YOUR_APP_NAME

Step 6: Now open the IDE of your choice for eg.  Visual studio code and open the folder where you have installed the react app newfolder (in the above example)  inside the folder you will see your app’s name reactapp (In our example). Use the terminal and move inside your app name folder. Use command cd reactapp (your app name)

Step 7: To start your app run the below command :
npm start 

->How to install React Js on linux Operating System
---------------------------------------------------
Step 1: Install npm
->Login to your server as a sudo user and run the following command:
sudo apt install npm

->Once the installation is complete, verify the version of npm installed using the command:
npm --version

->The installation of npm also installs Node.js. Confirm the version of Node installed using the command:
node --version

Step 2: Install create-react-app Utility
create-react-app is a utility that allows you to set up all the tools required for a React application.

It saves time and effort by setting everything up from scratch, giving you a head start.

To install the tool, run the following npm command:
sudo npm -g install create-react-app

->Once installed, confirm the version of create-react-app by running:
create-react-app --version

Step 3: Create and Launch Your First React Application
Creating a React application is simple and straightforward. We will create a React app called my-app as follows:
create-react-app my-app

->To run the application, navigate into the app directory:
cd my-app

->Then run the command:
npm start

->How to install NPM:- 
----------------------
Step 1: Download the Installer. Download the Windows Installer from NodeJs official website. ...
Step 2: Install Node.js and NPM. After choosing the path, double-click to install .msi binary files to initiate the installation process. ...
Step 3: Check Node.js and NPM Version.

->How to check version of NPM?
------------------------------
Here are some of the steps you can follow on how to check NPM version:

1.Open the command prompt by clicking the Windows key + R, typing ‘cmd’, and clicking Enter. 

2.In the Command prompt, type the following command and press Enter:
 
	npm –version or npm -v 


(8)How to check version of React Js?
------------------------------------
Approach 1: Using the package.json file
->The package.json contains metadata about our project. It is created by default when we create our React project. We can create a react app using the command mentioned below. 
	npx create-react-app name_of_the_app

Approach 2: Using the command line
	npm view react version

Approach 3: Using the version property of default import from React
->The default import from React library is an object that has a version property on it. We can use this property inside our JSX elements in our desired manner. 

Syntax:
import React from 'react';
let a = React.version



(9)How to change in components of React Js? 
-------------------------------------------

Below are some ways to change components in React:

1.Updating State:

React components can have internal state that can be updated using setState() method.
When the state changes, React will re-render the component to reflect the updated state.

Example:-

import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>{count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}


2.Using Props:

->Props (short for "properties") allow you to pass data from a parent component to a child component.
->If you want to change a child component based on new props from its parent, you can use componentDidUpdate() lifecycle method.

Example:-

function ParentComponent() {
  const [value, setValue] = useState(0);

  const updateValue = () => {
    setValue(value + 1);
  };

  return (
    <div>
      <button onClick={updateValue}>Update Value</button>
      <ChildComponent propValue={value} />
    </div>
  );
}

function ChildComponent(props) {
  return <p>{props.propValue}</p>;
}

3.Conditional Rendering:

->You can change what a component renders based on certain conditions using conditional rendering techniques like if statements or ternary operators.

Example:-
function ConditionalComponent({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <p>Welcome, User!</p> : <p>Please log in.</p>}
    </div>
  );
}

4.Using Lifecycle Methods:

React class components have lifecycle methods that allow you to execute code at specific points in the component's lifecycle, like componentDidMount(), componentDidUpdate(), and componentWillUnmount().

Example:-
import React, { Component } from 'react';

class LifecycleComponent extends Component {
  componentDidMount() {
    // Code to run after the component is mounted
  }

  componentDidUpdate(prevProps, prevState) {
    // Code to run after the component's props or state have changed
  }

  componentWillUnmount() {
    // Code to run before the component is removed from the DOM
  }

  render() {
    return <div>Lifecycle Component</div>;
  }
}

5.Using Hooks:

With React hooks like useEffect(), you can perform side effects in function components, similar to lifecycle methods in class components.

Example:-
import React, { useState, useEffect } from 'react';

function EffectComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch data or perform other side effects here
    fetch('/api/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []); // Empty dependency array means this effect runs once when the component mounts

  return <div>{data ? <p>{data.message}</p> : <p>Loading...</p>}</div>;
}











